# -*- coding: utf-8 -*-
"""Building_footprintipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C8hsw_9x3JmoIGHk-qkTZV9izs9KldQk
"""

!pip install geoai-py

!pip install segment-geospatial

import geoai
import os
import leafmap
from samgeo import SamGeo, show_image, download_file, overlay_images, tms_to_geotiff

import leafmap

# Create a map object
m = leafmap.Map()
m.add_basemap("Esri.WorldImagery")

# Display the map
m

bbox = m.user_roi_bounds()
print(bbox)

bbox = [73.1552, 19.3089, 73.1614, 19.3132]
image = "/content/drive/MyDrive/Building_Footprint/Test_Satellite.tif"
tms_to_geotiff(output=image, bbox=bbox, zoom=19, source="Esri.WorldImagery", overwrite=True, crs="EPSG:4326")

import rasterio
import matplotlib.pyplot as plt

# File paths
train_path = "/content/drive/MyDrive/Building_Footprint/satellite.tif"
input_path = "/content/drive/MyDrive/Building_Footprint/Test_Satellite.tif"

# Read train image
with rasterio.open(train_path) as src1:
    img1 = src1.read([1, 2, 3])
    img1 = img1.transpose(1, 2, 0)

# Read input image
with rasterio.open(input_path) as src2:
    img2 = src2.read([1, 2, 3])
    img2 = img2.transpose(1, 2, 0)

# Plot side by side
plt.figure(figsize=(18, 9))

plt.subplot(1, 2, 1)
plt.imshow(img1)
plt.title("Train Satellite")
plt.axis("off")

plt.subplot(1, 2, 2)
plt.imshow(img2)
plt.title("Test Satellite")
plt.axis("off")

plt.tight_layout()
plt.show()

import rasterio
import geopandas as gpd
import matplotlib.pyplot as plt
from rasterio.plot import plotting_extent

# File paths
train_raster_path = "/content/drive/MyDrive/Building_Footprint/satellite.tif"
train_vector_path = "/content/drive/MyDrive/Building_Footprint/Building_Footprint.geojson"

# Load raster (RGB)
with rasterio.open(train_raster_path) as src:
    img = src.read([1, 2, 3])  # Read RGB bands
    img = img.transpose(1, 2, 0)  # Convert to (rows, cols, bands)
    raster_crs = src.crs
    raster_extent = plotting_extent(src)

# Load vector
vector = gpd.read_file(train_vector_path)
vector_crs = vector.crs

# Print CRS info
print("Raster CRS:", raster_crs)
print("Vector CRS:", vector_crs)

# Reproject vector if necessary
if raster_crs != vector_crs:
    print("CRS mismatch — reprojecting vector to raster CRS.")
    vector = vector.to_crs(raster_crs)
else:
    print("CRS match confirmed.")

# Plot
fig, ax = plt.subplots(figsize=(10, 10))
ax.imshow(img, extent=raster_extent)
vector.plot(ax=ax, facecolor='none', edgecolor='lime', linewidth=1)
ax.set_title("Train Image and Traning Samples")
plt.axis('off')
plt.show()

out_folder = "/content/drive/MyDrive/Building_Footprint/output"
tiles = geoai.export_geotiff_tiles(
    in_raster=train_raster_path,
    out_folder=out_folder,
    in_class_data=train_vector_path,
    tile_size=512,
    stride=256,
    buffer_radius=0,
)

geoai.train_MaskRCNN_model(
    images_dir=f"{out_folder}/images",
    labels_dir=f"{out_folder}/labels",
    output_dir=f"{out_folder}/models",
    num_channels=3,
    pretrained=True,
    batch_size=4,
    num_epochs=10,
    learning_rate=0.005,
    val_split=0.2,
)

masks_path = "/content/drive/MyDrive/Building_Footprint/Prediction.tif"
model_path = "/content/drive/MyDrive/Building_Footprint/output/models/best_model.pth"
test_raster_path = "/content/drive/MyDrive/Building_Footprint/Test_Satellite.tif"

geoai.object_detection(
    test_raster_path,
    masks_path,
    model_path,
    window_size=512,
    overlap=256,
    confidence_threshold=0.5,
    batch_size=4,
    num_channels=3,
)

output_path = "/content/drive/MyDrive/Building_Footprint/Prediction.geojson"
gdf = geoai.orthogonalize(masks_path, output_path, epsilon=2)

geoai.create_split_map(
    left_layer=output_path,
    right_layer=test_raster_path,
    left_args={"layer_name": "Left Layer"},
    right_args={"layer_name": "Right Layer"},
    basemap="Esri.WorldImagery",
)

import rasterio
import geopandas as gpd
import matplotlib.pyplot as plt
from rasterio.plot import plotting_extent

# File paths
Test_raster_path = "/content/drive/MyDrive/Building_Footprint/Test_Satellite.tif"
Test_vector_path = "/content/drive/MyDrive/Building_Footprint/Prediction.geojson"

# Load raster (RGB)
with rasterio.open(Test_raster_path) as src:
    img = src.read([1, 2, 3])  # Read RGB bands
    img = img.transpose(1, 2, 0)  # Convert to (rows, cols, bands)
    raster_crs = src.crs
    raster_extent = plotting_extent(src)

# Load vector
vector = gpd.read_file(Test_vector_path)
vector_crs = vector.crs

# Print CRS info
print("Raster CRS:", raster_crs)
print("Vector CRS:", vector_crs)

# Reproject vector if necessary
if raster_crs != vector_crs:
    print("CRS mismatch — reprojecting vector to raster CRS.")
    vector = vector.to_crs(raster_crs)
else:
    print("CRS match confirmed.")

# Plot
fig, ax = plt.subplots(figsize=(10, 10))
ax.imshow(img, extent=raster_extent)
vector.plot(ax=ax, facecolor='none', edgecolor='Orange', linewidth=1)
ax.set_title("Train Image and Traning Samples")
plt.axis('off')
plt.show()